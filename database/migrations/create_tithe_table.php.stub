<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
use Tithe\Tithe;

return new class extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create(Tithe::$planTableName, function (Blueprint $table) {
            $table->id();
            $table->integer('grace_days')->default(0);
            $table->string('name')->unique();
            $table->string('display_name')->nullable();
            $table->unsignedBigInteger('periodicity')->default(1);
            $table->string('periodicity_type');
            $table->text('description')->nullable();
            $table->unsignedBigInteger('amount');
            $table->string('currency')->default('NGN');
            $table->json('meta')->nullable();
            $table->timestamps();
        });

        Schema::create(Tithe::$subscriptionTableName, function (Blueprint $table) {
            $table->id();

            if (Tithe::$subscriberUsesUuid) {
                $table->uuidMorphs('subscriber');
            } else {
                $table->numericMorphs('subscriber');
            }

            $table->foreignIdFor(Tithe::planModel());
            $table->date('started_at');
            $table->timestamp('canceled_at')->nullable();
            $table->timestamp('expired_at')->nullable();
            $table->timestamp('grace_days_ended_at')->nullable();
            $table->timestamp('suppressed_at')->nullable();
            $table->boolean('was_switched')->default(false);
            $table->json('meta')->nullable();
            $table->timestamps();
        });

        Schema::create(Tithe::$featureTableName, function (Blueprint $table) {
            $table->id();
            $table->string('name')->unique();
            $table->boolean('consumable');
            $table->boolean('quota')->default(false);
            $table->boolean('postpaid')->default(false);
            $table->unsignedBigInteger('periodicity')->nullable();
            $table->string('periodicity_type')->nullable();
            $table->timestamps();
        });

        Schema::create(Tithe::$featurePlanTableName, function (Blueprint $table) {
            $table->id();
            $table->decimal('charges')->nullable();
            $table->foreignIdFor(Tithe::featureModel());
            $table->foreignIdFor(Tithe::planModel());
            $table->timestamps();
        });

        Schema::create(Tithe::$featureConsumptionTableName, function (Blueprint $table) {
            $table->id();
            if (Tithe::$subscriberUsesUuid) {
                $table->uuidMorphs('subscriber');
            } else {
                $table->numericMorphs('subscriber');
            }
            $table->unsignedDecimal('consumption')->nullable();
            $table->timestamp('expired_at')->nullable();
            $table->foreignIdFor(Tithe::featureModel());
            $table->timestamps();
        });

        Schema::create(Tithe::$subscriptionRenewalTableName, function (Blueprint $table) {
            $table->id();
            $table->boolean('overdue');
            $table->boolean('renewal');
            $table->foreignIdFor(Tithe::subscriptionModel());
            $table->timestamps();
        });

        Schema::create(Tithe::$subscriptionInvoiceTableName, function (Blueprint $table) {
            $table->id();
            if (Tithe::$subscriberUsesUuid) {
                $table->uuidMorphs('subscriber');
            } else {
                $table->numericMorphs('subscriber');
            }
            $table->foreignIdFor(Tithe::subscriptionModel());
            $table->json('line_items')->nullable();
            $table->unsignedBigInteger('total');
            $table->timestamp('due_date');
            $table->enum('status', ['paid', 'unpaid', 'void'])->default('unpaid');
            $table->timestamp('paid_at')->nullable();
            $table->json('meta')->nullable();
            $table->timestamps();
        });

        schema::create(Tithe::$creditCardTableName, function (Blueprint $table) {
            $table->id();
            $table->string('signature')->unique();
            $table->string('type');
            $table->string('last4');
            $table->integer('exp_month');
            $table->year('exp_year');
            $table->string('bin')->nullable();
            $table->string('bank')->nullable();
            $table->string('account_name')->nullable();
            $table->string('country_code')->nullable();
            $table->timestamps();
        });

        schema::create(Tithe::$creditCardAuthorizationTableName, function (Blueprint $table) {
            $table->id();
            if (Tithe::$subscriberUsesUuid) {
                $table->uuidMorphs('subscriber');
            } else {
                $table->numericMorphs('subscriber');
            }
            $table->foreignIdFor(Tithe::creditCardModel());
            $table->string('email');
            $table->json('auth');
            $table->string('code');
            $table->boolean('default')->default(false);
            $table->timestamps();

            $table->unique(['subscriber_id', Tithe::newCreditCardModel()->getForeignKey()], 'auth_subscriber_card_unique');
        });

        Schema::create(Tithe::$userTableName, function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique();
            $table->string('username')->unique()->nullable();
            $table->string('password');
            $table->string('avatar')->nullable();
            $table->string('role');
            $table->rememberToken();
            $table->timestamps();
            $table->softDeletes();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists(Tithe::$planTableName);
        Schema::dropIfExists(Tithe::$subscriptionTableName);
        Schema::dropIfExists(Tithe::$subscriptionInvoiceTableName);
        Schema::dropIfExists(Tithe::$subscriptionInvoicePaymentTableName);
        Schema::dropIfExists(Tithe::$featureTableName);
        Schema::dropIfExists(Tithe::$subscriptionRenewalTableName);
        Schema::dropIfExists(Tithe::$featurePlanTableName);
        Schema::dropIfExists(Tithe::$creditCardTableName);
        Schema::dropIfExists(Tithe::$creditCardAuthorizationTableName);
        Schema::dropIfExists(Tithe::$userTableName);
    }
};
